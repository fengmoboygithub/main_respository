/**
 * 是否默认
 * @param val
 * @returns {String}
 */
function isDefaultConverter(val){
	if(val=="1"){
		return "是";
	} else {
		return "否";
	} 
}
//写入 编辑区内容
function handleSaveEditHtml(){
	var _demoClone = $(".demo").clone();
	$("div[id^='component_instance_']",$(_demoClone)).empty();
	return $(_demoClone).html();
}
//写入源码内容
function handleSaveSourceCode(){
	var _demoClone = $(".demo").clone();
	$("div[id^='component_instance_']",$(_demoClone)).empty();
	$(_demoClone).find("script").each(function(){
		cleanHtml(this)
	});
	var e="";
	$("#download-layout").children().html($(_demoClone).html());
	var t=$("#download-layout").children();
	t.find(".preview, .configuration, .drag, .remove").remove();
	t.find(".lyrow").addClass("removeClean");
	t.find(".box-element").addClass("removeClean");
	t.find(".box-element").find(".removeClean").each(function(){
		cleanHtml(this)
	});
	t.find(".lyrow .lyrow .lyrow .lyrow .lyrow .removeClean").each(function(){
		cleanHtml(this)
	});
	t.find(".lyrow .lyrow .lyrow .lyrow .removeClean").each(function(){
		cleanHtml(this)
	});
	t.find(".lyrow .lyrow .lyrow .removeClean").each(function(){
		cleanHtml(this)
	});
	t.find(".lyrow .lyrow .removeClean").each(function(){
		cleanHtml(this)
	});
	t.find(".lyrow .removeClean").each(function(){
		cleanHtml(this)
	});
	
	t.find(".removeClean").each(function(){
		cleanHtml(this)
	});
	t.find(".removeClean").remove();
	$("#download-layout .column").removeClass("ui-sortable");
	$("#download-layout .row").removeClass("clearfix").children().removeClass("column");
	$("#download-layout").find("script").each(function(){
		$(this).remove();
	});
	console.log(formatSrc);
	var formatSrc=$.htmlClean($("#download-layout").html(),{
		format:true,
		allowedAttributes:[["id"],["class"],["data-toggle"],["data-target"],["data-parent"],["role"],["data-dismiss"],["aria-labelledby"],["aria-hidden"],["data-slide-to"],["data-slide"]]
	});
	console.log(formatSrc);
	$("#download-layout").html(formatSrc);
	return formatSrc;
}
/**
 * 渲染操作按钮事件
 * id:实例id
 */
function renderBtn(id){
	var ids = "";
	if(id){
		ids = "[instanceId='"+id+"']";
	}
	//开启或关闭编辑模式
	$(".js_startedit"+ids).unbind("click").click(function() {
	  //实例id
	  var instanceId = $(this).attr("instanceId");
	  var _instance = $(".demo").find("[id='component_instance_"+instanceId+"']");
	  var iframe_content = $(_instance).find(".render-iframe").contents();
	  if($(this).hasClass("off_me")){
		  $(this).addClass("on_me");
		  $(this).html("关闭编辑模式");
		  $(this).removeClass("off_me");
		  //开启状态
		  //鼠标指针穿过元素时事件
		  iframe_content.find("[data-json-ref^='data_']").on("mouseenter", function(evt){
			  $(this).css({"border":"1px solid red"});
			  iframe_content.find("[data-json-ref^='data_']").not($(this)).css({"border":"0px solid red"});
			  iframe_content.find("[data-json-ref^='data_']").off("dblclick");
			  //元素双击时弹出事件
			  $(this).on("dblclick", function(evt){
					//数据源实例模态框弹出
					var dataJsonEnName = $(this).attr("data-json-ref");
					$.post(_BasePath+"/manage/componentInstance/queryDataJsonInstance.json", {
						"instanceId": instanceId,
						"dataJsonEnName": dataJsonEnName
					},
					function(dataQuery) {
					    if (dataQuery.result) {
							$("#editDataJsonModal").find("input[name='id']").val(dataQuery.t.id);
							$("#editDataJsonModal").find("input[name='instanceId']").val(dataQuery.t.instanceId);
							$("#editDataJsonModal").find("#dataJsonName").html(dataQuery.t.dataJsonName);
							editorEditJS.setValue(dataQuery.t.dataJsonCode);
							//数据源实例模态框弹出弹出
							$('#editDataJsonModal').modal({
								keyboard: false
							});
					    }
					},
					"json");
				  });
		  });
		  //鼠标指针离开元素时事件
		  iframe_content.find("[data-json-ref^='data_']").on("mouseleave", function(evt){
			  $(this).css({"border":"0px solid red"});
			  $(this).off("dblclick");
		  });
	  } else if($(this).hasClass("on_me")){
		  $(this).addClass("off_me");
		  $(this).html("开启编辑模式");
		  $(this).removeClass("on_me");
		  //关闭状态
		  iframe_content.find("[data-json-ref^='data_']").off();
	  }
	});
	//初始化为关闭编辑模式
	$(".js_startedit"+ids).removeClass("on_me");
	$(".js_startedit"+ids).removeClass("off_me");
	$(".js_startedit"+ids).addClass("on_me");
	$(".js_startedit"+ids).click();
	
	//设置模板信息弹出编辑框
	$(".js_setup"+ids).unbind("click").click(function() {
		bootbox.confirm("确认要将该组件实例信息设置为组件模板吗？", function (result) {  
            if(result) {  
            	$.post(_BasePath+"/manage/componentInstance/query.json", {
                    "id": $(this).attr("instanceId")
                },
                function(dataQuery) {
                    if (dataQuery.result) {
                    	$("#setupTemplateModal").find("input[name='id']").val(dataQuery.t.id);
                    	$("#setupTemplateModal").find("input[name='componentId']").val(dataQuery.t.componentId);
                    	//弹出设置模板模态框
            			$('#setupTemplateModal').modal({
            				keyboard: false
            			});
                    }
                },
                "json");  
            } else {  
            }  
        }.bind(this)); 
	});
	
	//选择组件模板信息弹出编辑框
	$(".js_chose"+ids).unbind("click").click(function() {
		$.post(_BasePath+"/manage/componentInstance/query.json", {
            "id": $(this).attr("instanceId")
        },
        function(dataQuery) {
            if (dataQuery.result) {
            	$("#choseTemplateModal").find("input[name='id']").val(dataQuery.t.id);
            	$("#choseTemplateModal").find("input[name='fileId']").val(dataQuery.t.fileId);
            	$("#choseTemplateModal").find("input[name='componentId']").val(dataQuery.t.componentId);
            	$("#choseTemplateModal").find("input[name='templateComponentId']").val(dataQuery.t.componentId);
    			$("#choseTemplateModal").find("#componentName").html(dataQuery.t.componentName);
    			//查询模板数据
    			$("#searchTemplateBtn").click();
    			//弹出编辑组件实例模态框
    			$('#choseTemplateModal').modal({
    				keyboard: false
    			});
            }
        },
        "json");
	});
	//测试该组件实例及其下面组件代码弹出在线代码编辑器
	$(".js_test"+ids).unbind("click").click(function() {
		window.open(_BasePath+"/manage/codeEditer/view.htm?type=instance&pageId="+fileId+"&id="+$(this).attr("instanceId"));
	});
	//删除组件实例信息
	$(".js_delete"+ids).unbind("click").click(function() {
		var _div = $(this).parent();
		$.post(_BasePath+"/manage/componentInstance/delete.json", {
            "id": $(this).attr("instanceId")
        },
        function(dataQuery) {
            if (dataQuery.result) {
            	bootbox.alert("删除组件实例成功",
                        function() {
            				$(_div).remove();
            				saveHtml("delete");
                        });
            }
        },
        "json");
	});
}

//保存源码
function saveHtml(type,instanceId) {
	if("edit"==type){
		postRenderIframe(instanceId);
		return;
	}
	//写入编辑区内容
	var htmlCodeByEdit = handleSaveEditHtml();
	//写入源码内容
	var sourceCode = handleSaveSourceCode();
	$.ajax({
		type : "post",
		url : _BasePath+"/manage/pageditor/saveHtmlCodeByEdit.json",
		dataType : "json",
		data : {"sourceCode":sourceCode,"htmlCodeByEdit":htmlCodeByEdit,"fileId":fileId},
		error : function(XMLHttpRequest, textStatus, errorThrown) {
			console.log("保存失败："+textStatus+"--"+errorThrown);
		},
		success : function(json) {
			if (json.result) {
				console.log("保存成功："+json.msg);
				bootbox.alert("页面源码保存成功",
						function() {
					if("add"==type){
						//如果是添加组件实例则渲染操作按钮
						//渲染操作按钮事件
						renderBtn(instanceId);
						postRenderIframe(instanceId);
					}
				});
			} else {
				console.log("保存失败："+json.msg);
				bootbox.alert("页面源码保存失败",
						function() {
				});
			}
		}
	});
}

function randomNumber(){
	return randomFromInterval(1,1e6)
}
function randomFromInterval(e,t){
	return Math.floor(Math.random()*(t-e+1)+e)
}
function gridSystemGenerator(){
	$(".lyrow .preview input").bind("keyup",function(){
		var e=0;
		var t="";
		var n=false;
		var r=$(this).val().split(" ",12);
		$.each(r,function(r,i){
			if(!n){
				if(parseInt(i)<=0) n=true;
				e=e+parseInt(i);
				t+='<div class="col-md-'+i+' column"></div>'
			}
		});
		if(e==12&&!n){
			$(this).parent().next().children().html(t);
			$(this).parent().prev().show()
		}else{
			$(this).parent().prev().hide()
		}
	})
}
function removeElm(){
	$(".demo").delegate(".remove","click",
	function(e){
		e.preventDefault();
		if(!$(this).hasClass("js_delete")){
			//删除容器
			var ids = [];
			$(this).parent().find(".view").find(".js_delete").each(function(){
				ids.push($(this).attr("instanceId"));
			});
			var _div = $(this).parent();
			$.post(_BasePath+"/manage/componentInstance/delete.json", {
	            "ids": ids.join(',')
	        },
	        function(dataQuery) {
	            if (dataQuery.result) {
	            	bootbox.alert("删除该容器下的组件实例成功。",
	                        function() {
			            		$(_div).remove();
			        			if(!$(".demo .lyrow").length>0){
			        				clearDemo();
			        			}
	            				saveHtml("delete");
	                        });
	            }
	        },
	        "json");
		}
		
	})
}

function clearDemo(){
	$(".demo").empty()
}
function removeMenuClasses(){
	$("#menu-layoutit li button").removeClass("active")
}
function changeStructure(e,t){
	$("#download-layout ."+e).removeClass(e).addClass(t)
}
function cleanHtml(e){
	$(e).parent().append($(e).children().html())
}
var currentDocument=null;
var timerSave=2e3;
var demoHtml=$(".demo").html();
$(window).resize(function(){
	$("body").css("min-height",$(window).height()-90);
	$(".demo").css("min-height",$(window).height()-160)
});
//post请求渲染组件实例iframe
function postRenderIframe(componentInstanceId){
	$.post(_BasePath+"/manage/componentInstance/loadInstanceIframe.json", {
        "pageId": fileId,
        "instanceId":componentInstanceId
    },
    function(dataQuery) {
        if (dataQuery.result) {
        	var instance_div_id = "component_instance_"+componentInstanceId;
        	var _$obj = $(".demo").find("[id='"+instance_div_id+"']");
        	//重新加载该组件实例iframe
        	renderInstanceIframe(_$obj,instance_div_id, dataQuery.t);
        }
    },
    "json");
}
//渲染组件实例iframe
function renderInstanceIframe(_$obj,instanceId, resultMap){
	$(_$obj).empty();
	var iframe = $("<iframe>",{"class":"render-iframe","frameborder":"1"});
	$(_$obj).append(iframe);
	var _contentsHtml = $(iframe).contents().find("html");
	//将预览窗口内容清空
	_contentsHtml.empty();
	var codeMap = resultMap[instanceId];
	var _html = html_decode_iframe(codeMap.htmlCode);
	var _js = html_decode_iframe(codeMap.jsCode);
	var len = _html.indexOf("<\/body>");
	if(len>0){
		_html = _html.substring(0,len);
	}
	var _js_str = "\n<script type=\"text/babel\">\n"+_js+"\n<\/script>\n";
	_html+=_js_str;
	_html+="<\/body>\n<\/html>";
	// 2. 将CSS，HTML字符串转换为Blob对象
	var blob = new Blob([_html], {
	  'type': 'text/html'
	});
	// 3. 使用URL.createObjectURL()方法将...
	$(iframe).attr("src",URL.createObjectURL(blob));
}
var editorEditJS = null;
//加载排序、拖拽事件
function initEvent() {
	//js编辑器初始化
	var mixedModeJS = {
		name: "javascript"
	};
	editorEditJS = CodeMirror.fromTextArea(document.getElementById("code_edit_js"), {
		mode: mixedModeJS,
		selectionPointer: true,
		theme:"night",
		lineNumbers: true
	});
	editorEditJS.setSize(500,200);
	$("body").css("min-height",$(window).height()-90);
	$(".demo").css("min-height",$(window).height()-160);
	$(".demo, .demo .column").sortable({
		connectWith:".column",
		opacity:.35,
		handle:".drag"
	});
	//布局拖拽
	$(".sidebar-nav .lyrow").draggable({
		connectToSortable:".demo",
		helper:"clone",
		handle:".drag",
		drag:function(e,t){
			t.helper.width(400)
		},
		stop:function(e,t){
			$(".demo .column").sortable({
				opacity:.35,
				connectWith:".column"
			})
		}
	});
	//组件拖拽
	$(".sidebar-nav .box").draggable({
		connectToSortable:".column",
		helper:"clone",
		handle:".drag",
		start:function(e,t){
			//标记当前操作组件 便于查找克隆副本
			$(e.target).addClass("current_box");
		},
		drag:function(e,t){
			t.helper.width(400);
		},
		stop:function(e,t){
			
			//标记清除
			$(e.target).removeClass("current_box");
			
			//组件ID
			var componentId = $(e.target).find(".drag").attr("componentId");
			//组件名称
			var componentName = $(e.target).find(".drag").attr("componentName");
			console.log($(".demo .current_box").find(".js_chose"));
			//查询该组件默认模板信息  创建组件实例
			$.ajax({
				type: "POST",
				url: _BasePath + "/manage/componentInstance/add.json",
				data: {
						"componentId":componentId,
						"fileId":fileId
				},
				dataType: "json",
				success: function(data, textStatus, xhr){
					if (data.result) {
						var id = data.t.id;
						//开启编辑模式
						$(".demo .current_box").find(".js_startedit").attr("instanceId",id);
						//设置模板
						$(".demo .current_box").find(".js_setup").attr("instanceId",id);
						//选择模板
						$(".demo .current_box").find(".js_chose").attr("instanceId",id);
						//代码测试器
						$(".demo .current_box").find(".js_test").attr("instanceId",id);
						//删除
						$(".demo .current_box").find(".js_delete").attr("instanceId",id);
						//指定实例id
						$(".demo .current_box").find(".render").attr("id","component_instance_"+id);
						//删除当前操作标志
						$(".demo .current_box").removeClass("current_box");
						//保存布局编辑器信息
						saveHtml("add",id);
					} else {
						$(".demo .current_box").find(".js_delete").click();
						$(".demo .current_box").removeClass("current_box");
						//该组件未设置默认模板信息，请到组件模板管理中设置信息
						bootbox.alert(data.msg,
			                    function() {
			                    });
					}
				},
				error: function(xhr, textStatus, error){
					console.log("textStatus:"+textStatus+"---error:"+error);
					$(".demo .current_box").find(".js_delete").click();
					$(".demo .current_box").removeClass("current_box");
					//该组件未设置默认模板信息，请到组件模板管理中设置信息
					bootbox.alert("请求错误，详见控制台日志",
		                    function() {
		                    });
				}
			});
		}
	});
	
	//初始化组件实例iframe
	$(".demo").find("[id^='component_instance_']").each(function(){
		var instanceId = $(this).attr("id");
		instanceId = instanceId.replace("component_instance_","");
		//渲染组件实例iframe
		postRenderIframe(instanceId);
	});
	
	//查询组件模板数据
	$("#searchTemplateBtn").unbind('click').bind('click',function(){
		//查询按钮绑定点击事件
		//渲染分页列表数据
		var interUrl = _BasePath + "/manage/componentTemplate/paging.json";
		var rolesGridTable = $(".questionGridTable");
		var pageBar = $(".pagination", rolesGridTable);
		var listTable = $("#listTable");
		var container = $(".list_data", listTable);
		var pageSize = 3;
		var pageInfoJson = {"matchedTotal": "matchedTotal", "pageSize": "pageSize", "pageIndex": "pageIndex"};
		var defaultOptions = {
				"componentId":$("#templateComponentId", $("#choseTemplateModal")).val(),
				"templateName":$("#templateName", $("#choseTemplateModal")).val()
		};
		var formObj = $("#search_form_question");
		//将查询条件生成optionsParam
		var optionsParam = defaultOptions;
		var optionCallback = {
				"onSuccess": function(json){
					if(json.resultSet == undefined || json.resultSet == null ||json.resultSet.length==0){
						
					}else{
						container.empty();
						$.each(json.resultSet, function(i, jsonObj){
							var qy_tr = $("<tr>",{"class":"gradeA odd"});
			    			container.append(qy_tr);
			    			//复选框列数据 一般是复选框列表项数据
			    			var checkedClumnData = '<input type="checkbox" class="js_checkbox" templateId="'+jsonObj.id+'" templateName="'+jsonObj.templateName+'"/>';
			    			//序号列数据 一般是序号列表项数据
			    			var sortClumnData = (i+1);
			    			
	    					//调用表格赋值插件 将jsonObj按照sortList(排序数组)顺序赋值到tr(表格中tbody标签中最后一个tr)写入
							listTable.columnAssi({
								//行数据
								"rowData":jsonObj,
								//排序数组  要与jsonObj属性名称匹配
								"sortList":[
											"templateName",//模板名称
											"isDefault"//是否默认
								],
								//复选框列数据 一般是复选框列表项数据
								"checkedClumnData":checkedClumnData,
								//序号列数据 一般是序号列表项数据
								"sortClumnData":sortClumnData
							});
			        	});
					}
				},
				"onFailure": function(){return false;}
		}
		getPageListData(interUrl, pageBar, container, pageSize, pageInfoJson, optionsParam, optionCallback);
	});
	
	//数据源实例模态框确定按钮
	$("#modalOkEditBtn").unbind("click").click(function() {
		$('#edit_data_json_form').submit();
	});
	
	//数据源实例模态框提交表单
	$('#edit_data_json_form').ajaxForm({
		dataType : 'json',
		beforeSerialize : function(formObj,optionObj){
			//组件html代码赋值
			var htmlCode = editorEditJS.getValue();
			$('#dataJsonCode').val(htmlCode);
			return true;
		},
		success : function(data) {
			if (data.result) {
				//关闭数据源实例模态框
				$("#editDataJsonModal").modal('hide');
				bootbox.alert("编辑数据源实例成功",
                    function() {
						saveHtml("edit",data.t.instanceId);
                    });
			}
		}
	});

	//设置模板模态框提交表单
	$('#setup_template_form').ajaxForm({
		dataType : 'json',
		success : function(data) {
			//关闭设置模板模态框
			$("#setupTemplateModal").modal('hide');
			bootbox.alert(data.msg,
	            function() {
	            });
		}
	});
	
	//设置模板模态框确定按钮
	$("#modalOkSetupBtn").unbind("click").click(function() {
		$('#setup_template_form').submit();
	});
	
	//选择组件模板提交表单
	$('#chose_template_form').ajaxForm({
		dataType : 'json',
		beforeSerialize : function(formData,formObj,optionObj){
			var checkInfo = $('input[type="checkbox"][class="js_checkbox"]:checked', $("#choseTemplateModal"));
			var checkLen = checkInfo.length;
			if(checkLen > 1){
				bootbox.alert("至多选择一条组件模板数据", function() { });
				return false;
			} else if(checkLen == 0) {
				bootbox.alert("请选择一条模板数据", function() { });
				return false;
			} else {
				var templateId = checkInfo.attr("templateId");
				console.log("选择的模板id"+templateId);
				$("#choseTemplateModal").find("input[name='templateId']").val(templateId);
				return true;
			}
		},
		success : function(data) {
			if (data.result) {
				//关闭编辑组件实例模态框
				$("#choseTemplateModal").modal('hide');
				bootbox.alert("编辑组件实例成功",
                    function() {
						saveHtml("edit",data.t.id);
                    });
			}
		}
	});
	
	//编辑组件实例模态框确定按钮
	$("#modalOkChoseBtn").unbind("click").click(function() {
		$('#chose_template_form').submit();
	});
	//渲染操作按钮事件
	renderBtn(null);
	//触发保存模态框显示事件
	$('#button-share-modal').click(function (e) {
		e.preventDefault();
		//调用保存源码，编辑区方法
		saveHtml("save");
	})
	//编辑按钮事件
	$("#edit").click(function(){
		$("body").removeClass("devpreview sourcepreview");
		$("body").addClass("edit");
		removeMenuClasses();
		$(this).addClass("active");
		return false
	});
	//清空按钮事件
	$("#clear").click(function(e){
		e.preventDefault();
		clearDemo()
	});
	//退出按钮事件
	$("#exit").click(function(e){
		e.preventDefault();
		if("modal" == optType){
			parent.jQuery.fancybox.close();
			parent.window.location.reload();
		}
	});
	//布局编辑按钮事件
	$("#devpreview").click(function(){
		$("body").removeClass("edit sourcepreview");
		$("body").addClass("devpreview");
		removeMenuClasses();
		$(this).addClass("active");
		return false
	});
	//预览按钮事件
	$("#sourcepreview").click(function(){
		if($("body").hasClass("edit")){
			$("body").removeClass("edit");
			$("body").addClass("devpreview sourcepreview");
			removeMenuClasses();
			$(this).addClass("active");
		} else if($("body").hasClass("devpreview")){
			$("body").removeClass();
			$("body").addClass("edit");
			$(this).removeClass("active");
		}
		return false
	});
	$(".sidebar-nav").on("click",".nav-header",function(){
		$(".sidebar-nav .boxes, .sidebar-nav .rows").hide();
		$(this).next().slideDown()
	});
	removeElm();
	gridSystemGenerator();
}

$(function() {
	//初始化各事件
	initEvent();
});