<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.company.one.riskbreachcause.dao.RiskBreachCauseMapper">
  <resultMap id="BaseResultMap" type="com.company.one.riskbreachcause.model.RiskBreachCause">
    <id column="id" jdbcType="INTEGER" property="id" />
	<result column="bond_code" jdbcType="VARCHAR" property="bondCode" />
	<result column="bond_type" jdbcType="VARCHAR" property="bondType" />
	<result column="bond_main_type" jdbcType="VARCHAR" property="bondMainType" />
	<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	<result column="trust_compensation" jdbcType="VARCHAR" property="trustCompensation" />
	<result column="risk_state" jdbcType="VARCHAR" property="riskState" />
	<result column="breach_time" jdbcType="TIMESTAMP" property="breachTime" />
    <result column="breach_bature" jdbcType="VARCHAR" property="breachBature" />
    <result column="breach_cause" jdbcType="VARCHAR" property="breachCause" />
	<result column="paid_amount" jdbcType="VARCHAR" property="paidAmount" />
	<result column="unpaid_amount" jdbcType="VARCHAR" property="unpaidAmount" />    
    <result column="all_paid_time" jdbcType="TIMESTAMP" property="allPaidTime" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    a.id, a.bond_code, a.bond_type, a.bond_main_type, a.update_time, a.trust_compensation, a.risk_state, 
	a.breach_time, a.breach_bature, a.breach_cause, a.paid_amount, a.unpaid_amount, a.all_paid_time, a.state
  </sql>
  <select id="selectByExample" parameterType="com.company.one.riskbreachcause.model.RiskBreachCauseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from 
	(select
		rbc.id, 
		bi.bond_code, 
		bi.bond_type, 
		'01' as bond_main_type, 
		rbc.update_time, 
		rbi.trust_compensation, 
		rbi.risk_state, 
		rbc.breach_time, 
		rbc.breach_bature, 
		rbc.breach_cause, 
		rbc.paid_amount, 
		rbc.unpaid_amount, 
		rbc.all_paid_time, 
		rbc.state
		from risk_breach_cause rbc
			join bond_risk_breach_info rbi on rbc.info_id=rbi.id
			join bond_base_info bi on rbi.base_id=bi.id and bi.state=1 and bi.edit_state=1
	union all
	select 
		rbc.id, 
		bi.abs_code, 
		'0201' as bond_type, 
		'02' as bond_main_type, 
		rbc.update_time, 
		'' as trust_compensation, 
		rbi.risk_state, 
		rbc.breach_time, 
		rbc.breach_bature, 
		rbc.breach_cause, 
		rbc.paid_amount, 
		rbc.unpaid_amount, 
		rbc.all_paid_time,
		'1' as state
		from abs_risk_breach_cause rbc
			join abs_risk_breach_info rbi on rbc.info_id=rbi.id
			join abs_base_info bi on rbi.base_id=bi.id
			right join abs_issue_info a1 on a1.base_id=bi.id where a1.state=1) a
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from risk_breach_cause
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from risk_breach_cause
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.company.one.riskbreachcause.model.RiskBreachCauseExample">
    delete from risk_breach_cause
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.company.one.riskbreachcause.model.RiskBreachCause">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into risk_breach_cause (info_id, user_id, breach_cause, 
      breach_bature, risk_progress_situation, breach_time, 
      paid_amount, unpaid_amount, all_paid_time, 
      supervision_situation, create_time, update_time, 
      state, operator, remark
      )
    values (#{infoId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{breachCause,jdbcType=VARCHAR}, 
      #{breachBature,jdbcType=VARCHAR}, #{riskProgressSituation,jdbcType=VARCHAR}, #{breachTime,jdbcType=TIMESTAMP}, 
      #{paidAmount,jdbcType=VARCHAR}, #{unpaidAmount,jdbcType=VARCHAR}, #{allPaidTime,jdbcType=TIMESTAMP}, 
      #{supervisionSituation,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{state,jdbcType=INTEGER}, #{operator,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.company.one.riskbreachcause.model.RiskBreachCause">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into risk_breach_cause
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="infoId != null">
        info_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="breachCause != null">
        breach_cause,
      </if>
      <if test="breachBature != null">
        breach_bature,
      </if>
      <if test="riskProgressSituation != null">
        risk_progress_situation,
      </if>
      <if test="breachTime != null">
        breach_time,
      </if>
      <if test="paidAmount != null">
        paid_amount,
      </if>
      <if test="unpaidAmount != null">
        unpaid_amount,
      </if>
      <if test="allPaidTime != null">
        all_paid_time,
      </if>
      <if test="supervisionSituation != null">
        supervision_situation,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="operator != null">
        operator,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="infoId != null">
        #{infoId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="breachCause != null">
        #{breachCause,jdbcType=VARCHAR},
      </if>
      <if test="breachBature != null">
        #{breachBature,jdbcType=VARCHAR},
      </if>
      <if test="riskProgressSituation != null">
        #{riskProgressSituation,jdbcType=VARCHAR},
      </if>
      <if test="breachTime != null">
        #{breachTime,jdbcType=TIMESTAMP},
      </if>
      <if test="paidAmount != null">
        #{paidAmount,jdbcType=VARCHAR},
      </if>
      <if test="unpaidAmount != null">
        #{unpaidAmount,jdbcType=VARCHAR},
      </if>
      <if test="allPaidTime != null">
        #{allPaidTime,jdbcType=TIMESTAMP},
      </if>
      <if test="supervisionSituation != null">
        #{supervisionSituation,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="operator != null">
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.company.one.riskbreachcause.model.RiskBreachCauseExample" resultType="java.lang.Long">
    select count(*) from risk_breach_cause
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update risk_breach_cause
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.infoId != null">
        info_id = #{record.infoId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.breachCause != null">
        breach_cause = #{record.breachCause,jdbcType=VARCHAR},
      </if>
      <if test="record.breachBature != null">
        breach_bature = #{record.breachBature,jdbcType=VARCHAR},
      </if>
      <if test="record.riskProgressSituation != null">
        risk_progress_situation = #{record.riskProgressSituation,jdbcType=VARCHAR},
      </if>
      <if test="record.breachTime != null">
        breach_time = #{record.breachTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.paidAmount != null">
        paid_amount = #{record.paidAmount,jdbcType=VARCHAR},
      </if>
      <if test="record.unpaidAmount != null">
        unpaid_amount = #{record.unpaidAmount,jdbcType=VARCHAR},
      </if>
      <if test="record.allPaidTime != null">
        all_paid_time = #{record.allPaidTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.supervisionSituation != null">
        supervision_situation = #{record.supervisionSituation,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.operator != null">
        operator = #{record.operator,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update risk_breach_cause
    set id = #{record.id,jdbcType=INTEGER},
      info_id = #{record.infoId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      breach_cause = #{record.breachCause,jdbcType=VARCHAR},
      breach_bature = #{record.breachBature,jdbcType=VARCHAR},
      risk_progress_situation = #{record.riskProgressSituation,jdbcType=VARCHAR},
      breach_time = #{record.breachTime,jdbcType=TIMESTAMP},
      paid_amount = #{record.paidAmount,jdbcType=VARCHAR},
      unpaid_amount = #{record.unpaidAmount,jdbcType=VARCHAR},
      all_paid_time = #{record.allPaidTime,jdbcType=TIMESTAMP},
      supervision_situation = #{record.supervisionSituation,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      state = #{record.state,jdbcType=INTEGER},
      operator = #{record.operator,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.company.one.riskbreachcause.model.RiskBreachCause">
    update risk_breach_cause
    <set>
      <if test="infoId != null">
        info_id = #{infoId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="breachCause != null">
        breach_cause = #{breachCause,jdbcType=VARCHAR},
      </if>
      <if test="breachBature != null">
        breach_bature = #{breachBature,jdbcType=VARCHAR},
      </if>
      <if test="riskProgressSituation != null">
        risk_progress_situation = #{riskProgressSituation,jdbcType=VARCHAR},
      </if>
      <if test="breachTime != null">
        breach_time = #{breachTime,jdbcType=TIMESTAMP},
      </if>
      <if test="paidAmount != null">
        paid_amount = #{paidAmount,jdbcType=VARCHAR},
      </if>
      <if test="unpaidAmount != null">
        unpaid_amount = #{unpaidAmount,jdbcType=VARCHAR},
      </if>
      <if test="allPaidTime != null">
        all_paid_time = #{allPaidTime,jdbcType=TIMESTAMP},
      </if>
      <if test="supervisionSituation != null">
        supervision_situation = #{supervisionSituation,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="operator != null">
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.company.one.riskbreachcause.model.RiskBreachCause">
    update risk_breach_cause
    set info_id = #{infoId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      breach_cause = #{breachCause,jdbcType=VARCHAR},
      breach_bature = #{breachBature,jdbcType=VARCHAR},
      risk_progress_situation = #{riskProgressSituation,jdbcType=VARCHAR},
      breach_time = #{breachTime,jdbcType=TIMESTAMP},
      paid_amount = #{paidAmount,jdbcType=VARCHAR},
      unpaid_amount = #{unpaidAmount,jdbcType=VARCHAR},
      all_paid_time = #{allPaidTime,jdbcType=TIMESTAMP},
      supervision_situation = #{supervisionSituation,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER},
      operator = #{operator,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>